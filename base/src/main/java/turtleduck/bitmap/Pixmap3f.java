/*
 * WARNING: DO NOT EDIT!
 * This file is automatically generated from Pixmap_CH__T__Template.java by turtleduck.bitmap.BitmapGenerator
 */

package turtleduck.bitmap;

import org.joml.Vector3f; 

/**
 * Interface for float-pixmaps with 3 colour channels. 
 * 
 * A pixmap is a two-dimensional grid of pixels, with each pixel having one or
 * more colour components (“channels”). This interface provides generic
 * {@link #get(int, int, int)} and {@link #set(int, int, int, float)} methods
 * to read or write from arbitrary channels, as well as specific methods for
 * accessing a single channel/colour component.
 * 
 * For global operations, you can iterate over all pixel locations with
 * {@link #foreachLocation(turtleduck.bitmap.FloatPixmap.LocationConsumer)},
 * and each pixel value with {@link #foreach(PixelConsumer3T)} or
 * {@link #map(PixelFunction3T)}.
 * 
 * @author anya
 *
 */
public interface Pixmap3f extends FloatPixmap {

    /**
     * @return Number of channels (values per pixel) of the pixmap (always 3 for Pixmap3f).
     */
    int channels();

    /**
     * Read the value of a component at (x,y)
     * 
     * @param x  X coordinate
     * @param y  Y coordinate
     * @param ch The channel (0–2) 
     * @return The value of channel ch at (x,y)
     */
    float get(int x, int y, int ch);

    /**
     * Read the value of the channel 0 (red) component 
     * 
     * 
     * @param x X coordinate 
     * @param y Y coordinate 
     * @return The value at (x,y) 
     */
    float r(int x, int y); 

    /**
     * Read the value of the channel 1 (green) component 
     * 
     * 
     * @param x X coordinate 
     * @param y Y coordinate 
     * @return The value at (x,y) 
     */
    float g(int x, int y); 

    /**
     * Read the value of the channel 2 (blue) component 
     * 
     * 
     * @param x X coordinate 
     * @param y Y coordinate 
     * @return The value at (x,y) 
     */
    float b(int x, int y); 

    /**
     * 
     */

    /**
     * Set the value of a channel at (x,y)
     * 
     * @param x     X coordinate
     * @param y     Y coordinate
     * @param ch    The channel (0–2) 
     * @param value The new value for (x,y)
     */
    Pixmap3f set(int x, int y, int ch, float value);

    /**
     * Set the value of the channel 0 (red) component 
     * 
     * 
     * @param x     X coordinate 
     * @param y     Y coordinate 
     * @param value The new red value for (x,y) 
     */
    Pixmap3f r(int x, int y, float value); 

    /**
     * Set the value of the channel 0 (red) component 
     * 
     * 
     * @param x     X coordinate 
     * @param y     Y coordinate 
     * @param value The new red value for (x,y) 
     */
    Pixmap3f g(int x, int y, float value); 

    /**
     * Set the value of the channel 0 (red) component 
     * 
     * 
     * @param x     X coordinate 
     * @param y     Y coordinate 
     * @param value The new red value for (x,y) 
     */
    Pixmap3f b(int x, int y, float value); 

    /**
     * 
     */

    /**
     * Do something for each location in the bitmap
     * 
     * @param consumer A consumer, will receive (this bitmap, x, y)
     */
    Pixmap3f foreachLocation(LocationConsumer consumer);

    /**
     * Do something for each value in the bitmap
     * 
     * @param consumer A consumer, will receive (r,g,b) 
     */
    Pixmap3f foreach(PixelConsumer3f consumer);
    Pixmap3f foreach(PixelConsumerf consumer);

    /**
     * Transform each value in the bitmap.
     * 
     * @param fun A function
     */
    Pixmap3f map(PixelFunction3f fun);

    public interface PixelFunction3f { 
        Vector3f apply(Vector3f p);
    }


    public interface PixelConsumer3f {
        void accept(int x, int y //
                , float r 
                , float g 
                , float b 
        );
    }

}
