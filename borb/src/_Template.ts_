import SubSystem from './SubSystem';
import { BorbElement, sysId, tagName, uniqueId } from './Common';
import { html, render } from 'uhtml';
import Styles from './Styles';

const revision: number = import.meta.webpackHot && import.meta.webpackHot.data ? import.meta.webpackHot.data['revision'] + 1 : 0;
const previousVersion: typeof _self = import.meta.webpackHot && import.meta.webpackHot.data ? import.meta.webpackHot.data['self'] : undefined;


class STATE {
    constructor(old? : STATE) {

    }
}

const stateHolder : STATE = new STATE(previousVersion.stateHolder);

const _self = {
    _id: sysId(import.meta.url),
    _revision: revision,
    STATE,
    stateHolder
};
export const SUBSYSTEM = _self;
export default SUBSYSTEM;

SubSystem.declare(_self)
    .reloadable(true)
    .depends('dom', Styles)
    .elements()
    .register();

if (import.meta.webpackHot) {
    import.meta.webpackHot.accept();
    import.meta.webpackHot.addDisposeHandler((data) => {
        console.warn(`Unloading ${_self._id}`);
        data['revision'] = revision;
        data['self'] = _self;
    });
}
