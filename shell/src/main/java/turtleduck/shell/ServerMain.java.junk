package turtleduck.shell;

import org.eclipse.jetty.server.RequestLog;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Response;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.websocket.server.config.JettyWebSocketServletContainerInitializer;
import org.slf4j.Logger;
import turtleduck.util.Logging;

public class ServerMain  {
    static Logger log = Logging.getLogger(ServerMain.class.getName());

    public static void main(String[] args) throws Exception {
        Server server = new Server(8088);
        // Create a ServletContextHandler with the given context path.
        ServletContextHandler handler = new ServletContextHandler(server, "/");
        server.setHandler(handler);
        server.setRequestLog(new RequestLogger());
        // Add a WebSocket-initializer Servlet to register WebSocket endpoints.
        handler.setLogger(log);
        // Ensure that JettyWebSocketServletContainerInitializer is initialized,
        // to setup the JettyWebSocketServerContainer for this web application context.
        JettyWebSocketServletContainerInitializer.configure(handler, (servletContext, container) -> {
            // Configure the ServerContainer.
            container.setMaxTextMessageSize(128 * 1024);

            container.addMapping("/socket", (upgradeRequest, upgradeResponse) -> {
                System.out.println(upgradeRequest);
                System.out.println(upgradeResponse);

                // Create the new WebSocket endpoint.
                return new WebSocketServer();
            });
        }); // Starting the Server will start the ServletContextHandler.
        server.start();
    }


     static class RequestLogger implements RequestLog {

        @Override
        public void log(Request request, Response response) {
            log.info("request {}", request.toString());
            // TODO Auto-generated method stub

        }

    }
}
